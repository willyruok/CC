1. Row 기반 데이터베이스와 컬럼 기반 데이터베이스

로우 기반 데이터베이스
전체 로우가 연속적으로 저장되는 일반적인 방식

컬럼 지향 데이터베이스
데이터를 컬럼단위로 묶어서 저장한다. 그런 다음 이 컬럼값은 디스크 상에 연속으로 저장된다.
컬럼 기반으로 데이터를 저장하는 이유는 특정 쿼리에 대해서는 로우의 모든 데이터가 필요하지 않다는 가정에 기반하고 있다.
이러한 경우는 특히 분석적인 데이터베이스에서 자주 발생하기 때문에 분석적 데이터베이스들은 이러한 형태의 저장 스키마를 사용하기 위한 좋은 후보이다. 이렇듯 I/O가 줄어든다는 이유만으로도 이 새로운 데이터 저장 구조를 채택할 법한데, 이 구조는 여기에 높은 압축률이라는 장점까지 제공한다. 일반적으로 서로 다른 논리적인 로우 상의 같은 컬럼값들은 본질상 매우 유사하기 마련이고, 때로는 아주 약간씩만 다르기 때문에 압축을 위해 서로 묶이는 편이 서로 상이한 값들로 이루어진 로우 지향 레코드 구조보다 훨씬 나을 때가 많다. 대부분의 압축 알고리집은 한정된 영역만을 바라보기 때문이다.


컬러에 기반하여 델타 압축이나 프리픽스 압축같은 특화된 알고리즘을 선택하면 엄청나게 향상된 압축 비율을 얻을 수 있다.
압축 비율이 좋으면 대역폭을 더 효율적으로 사용 할 수 있다.


2. Restful 방식

HTTP와 JSON을 함께 사용하여 Open API 구현 방법의 주류를 이루고 있음

대부분의 Open API는 REST 아키텍처를 기반으로 설계 및 구현

REST 원리를 따르는 시스템을 Restful 이라고 지칭

REST는 크게 리소스, 메소드, 메시지 3가지 요소로 구성

REST : Representational State Transfer


REST는 HTTP 표준에만 따른 다면, 어떠한 기술이라던지 사용이 가능한 인터페이스 스타일 

HTTP + JSON으로 REST API를 정의했다면, 안드로이드 플랫폼, iOS 플랫폼, 또는 C, Java/Python 등 특정 언어나 기술에 종속 받지 않고 HTTP와 JSON을 사용할 수 있는 모든 플랫폼에 사용이 가능한 느슨한 결함(Loosely coupling) 형태의 구조임


레스풀 웹 서비스의 속성
- 제공하는 모든 정보를 URI로 표시할 수 있어야 한다.
- 일반 웹 페이지처럼 하나의 리소스들은 서로 주변의 연관 리소스들과 연결되어 표현되어야 한다.
- 현재 클라이언트의 상태를 절대로 서버에서 관리하지 않아야 한다. 모든 요청은 일회성의 성격을 가지며 이전의 요청에 영향을 받지 말아야 한다. 세션을 유지하지 않기때문에 서버 로드 발란싱이 매우 유리하다.
- REST 에서는 CRUD(Create, Read, Update, Delete)에 해당하는 4가지의 메소드만 사용


REST는 웹의 모든 리소스를 URI로 표현하고 이를 구조적이고 유기적으로 연결하며, 비 상태 지향적인 방법으로 일관된 메소드를 사용하여 리소스를 사용하는 웹서비스 디자인 표준이다.

http://www.iamcorean.net/22






3. openTSDB
- HBase와 연계하여 시계열 데이터를 관리
- OpenTSDB 는 타임시리즈데몬(TSD) 들로 구성된다. 
- 각각의 TSD 들은 독립적이며 상태공유 없이 돌아간다. 
- 각각의 TSD 는 HBase 를 사용하며, 타임시리즈데이터를 가져와서 저장한다.
- HBase 스키마는 저장공간을 줄이기위해 비슷한 타임시리즈를 빠르게 집약하는것에 최적화.
- TSD 유저들은 HBase 에 직접적으로 접근할 필요가 없다. 






4. MVC 패턴


1. Row 기반 데이터베이스와 컬럼 기반 데이터베이스

로우 기반 데이터베이스
전체 로우가 연속적으로 저장되는 일반적인 방식

컬럼 지향 데이터베이스
데이터를 컬럼단위로 묶어서 저장한다. 그런 다음 이 컬럼값은 디스크 상에 연속으로 저장된다.
컬럼 기반으로 데이터를 저장하는 이유는 특정 쿼리에 대해서는 로우의 모든 데이터가 필요하지 않다는 가정에 기반하고 있다.
이러한 경우는 특히 분석적인 데이터베이스에서 자주 발생하기 때문에 분석적 데이터베이스들은 이러한 형태의 저장 스키마를 사용하기 위한 좋은 후보이다. 이렇듯 I/O가 줄어든다는 이유만으로도 이 새로운 데이터 저장 구조를 채택할 법한데, 이 구조는 여기에 높은 압축률이라는 장점까지 제공한다. 일반적으로 서로 다른 논리적인 로우 상의 같은 컬럼값들은 본질상 매우 유사하기 마련이고, 때로는 아주 약간씩만 다르기 때문에 압축을 위해 서로 묶이는 편이 서로 상이한 값들로 이루어진 로우 지향 레코드 구조보다 훨씬 나을 때가 많다. 대부분의 압축 알고리집은 한정된 영역만을 바라보기 때문이다.


컬러에 기반하여 델타 압축이나 프리픽스 압축같은 특화된 알고리즘을 선택하면 엄청나게 향상된 압축 비율을 얻을 수 있다.
압축 비율이 좋으면 대역폭을 더 효율적으로 사용 할 수 있다.


Row 기반 DBMS

OLTP(Online Realtime Transaction Processing) 업무에 적합
은행의 입출금 거래와 같이 단순한 거래가 많고, 동시 다발적으로 발생하는 업무인 경우에 적용


Column 기반 DBMS

OLAP(OnLine Analytical Processing) 업무에 적합
정보 위주의 분석 처리를 의미

다양한 비즈니스 관점에서 쉽고 빠르게 다차원적인 데이터에 접근하여 의사 결정에 활용할 수 있는 정보를 얻을 수 있게 해주는 기술.
 
OLTP에서 처리된 트랜잭션 데이터를분석해 제품의 판매 추이, 구매 성향 파악, 재무 회계 분석 등을 프로세싱하는 것을 의미함




2. Restful 방식

HTTP와 JSON을 함께 사용하여 Open API 구현 방법의 주류를 이루고 있음

대부분의 Open API는 REST 아키텍처를 기반으로 설계 및 구현

REST 원리를 따르는 시스템을 Restful 이라고 지칭

REST는 크게 리소스, 메소드, 메시지 3가지 요소로 구성

REST : Representational State Transfer

- Uniform Interface
REST는 HTTP 표준에만 따른 다면, 어떠한 기술이라던지 사용이 가능한 인터페이스 스타일 
HTTP + JSON으로 REST API를 정의했다면, 안드로이드 플랫폼, iOS 플랫폼, 또는 C, Java/Python 등 특정 언어나 기술에 종속 받지 않고 HTTP와 JSON을 사용할 수 있는 모든 플랫폼에 사용이 가능한 느슨한 결함(Loosely coupling) 형태의 구조임

- Stateless
사용자나 클라이언트의 컨택스트를 서버쪽에 유지 하지 않는다는 의미
쉽게 표현하면 HTTP Session과 같은 컨텍스트 저장소에 상태 정보를 저장하지 않는 형태를 의미함.
각 API 서버는 들어오는 요청만을 들어오는 메시지로만 처리하면 됨
세션과 같은 컨텍스트 정보를 신경쓸 필요가 없기 때문에 구현이 단순해짐

- Cacheable
일반적인 서비스 시스템에서 60%에서 많게는 80%가량의 트렌젝션이 Select와 같은 조회성 트렌젝션인 것을 감안하면, HTTP의 리소스들을 웹캐쉬 서버등에 캐슁하는 것은 용량이나 성능 면에서 많은 장점이 있음
Client가 HTTP GET을 “Last-Modified” 값과 함께 보냈을 때, 컨텐츠가 변화가 없으면 REST 컴포넌트는 “304 Not Modified”를 리턴하면 Client는 자체 캐쉬에 저장된 값을 사용하게 됨
캐쉬를 사용하게 되면 네트웍 응답시간 뿐만 아니라, REST 컴포넌트가 위치한 서버에 트렌젝션을 발생시키지 않기 때문에, 전체 응답시간과 성능 그리고 서버의 자원 사용률을 비약적으로 향상 시킬 수 있음

- Self-descriptiveness(자체 표현 구조)
REST API 자체가 매우 쉬워서 API 메시지 자체만 보고도 API를 이해할 수 있는 Self-descriptiveness 구조를 갖는 다는 것
리소스와 메서드를 이용해서 어떤 메서드에 무슨 행위를 하는지를 알 수 있으며, 또한 메시지 포맷 역시 JSON을 이용해서 직관적으로 이해가 가능한 구조
대부분의 REST 기반의 OPEN API들이 API 문서를 별도로 제공하고 있지만, 디자인 사상은 최소한의 문서의 도움만으로도 API 자체를 이해할 수 있어야 함

- Client-Server 구조
REST 서버는 API를 제공하고, 제공된 API를 이용해서 비즈니스 로직 처리 및 저장을 책임
클라이언트의 경우 사용자 인증이나 컨택스트(세션,로그인 정보)등을 직접 관리하고 책임 지는 구조로 역할이 나뉘어 지고 있음.



레스풀 웹 서비스의 속성
- 제공하는 모든 정보를 URI로 표시할 수 있어야 한다.
- 일반 웹 페이지처럼 하나의 리소스들은 서로 주변의 연관 리소스들과 연결되어 표현되어야 한다.
- 현재 클라이언트의 상태를 절대로 서버에서 관리하지 않아야 한다. 모든 요청은 일회성의 성격을 가지며 이전의 요청에 영향을 받지 말아야 한다. 세션을 유지하지 않기때문에 서버 로드 발란싱이 매우 유리하다.
- REST 에서는 CRUD(Create, Read, Update, Delete)에 해당하는 4가지의 메소드만 사용


REST는 웹의 모든 리소스를 URI로 표현하고 이를 구조적이고 유기적으로 연결하며, 비 상태 지향적인 방법으로 일관된 메소드를 사용하여 리소스를 사용하는 웹서비스 디자인 표준이다.
http://www.iamcorean.net/22










3. openTSDB
- HBase와 연계하여 시계열 데이터를 관리
- OpenTSDB 는 타임시리즈데몬(TSD) 들로 구성된다. 
- 각각의 TSD 들은 독립적이며 상태공유 없이 돌아간다. 
- 각각의 TSD 는 HBase 를 사용하며, 타임시리즈데이터를 가져와서 저장한다.
- HBase 스키마는 저장공간을 줄이기위해 비슷한 타임시리즈를 빠르게 집약하는것에 최적화.
- TSD 유저들은 HBase 에 직접적으로 접근할 필요가 없다. 






4. MVC 패턴
- GUI기반 Application 설계 패턴
- 클라이언트의 요청을 받아 처리하여 응답하는 로직을 세개의 로직(Model, View, Controller)로 나누어 개발

-Model
usiness Logic(클라이언트 요청에 대한 업무 처리)을 담당
Business Service와 Data Access Object로 분리
Business Service
 Business 로직의 일의 흐름을 관리
 #DB 관련된 작업을 제외한 로직을 처리
Data Access Object(DAO)
 Database 관련된 로직만 처리
 DB 관련 로직을 제외한 어떠한 업무처리도 가지지 않는다.

-View
처리 결과를 응답하는 로직을 담당(Presentation Logic)

-Controller
Client의 요청을 처리하는 전체 흐름을 control하는 역할을 담당


처리내용
1. client의 요청을 받는다.
  1-1 client가 요청시 입력한 내용을 읽는다.
  1-2 client로 부터 받은 값을 검증한다.
2. Business 로직을 호출한다. - Model 호출
3. 응답처리 로직을 호출한다. - View 호출


Model2 -> Web Application에 MVC 패턴 적용

Model - java bean -> java class

view - JSP

Controller - Servlet

http://manong.tistory.com/259
